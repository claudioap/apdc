/* ########## DATA TYPES ########## */
number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
boolean = { "true" | "false" }
inner = @{ char* }
string = ${ "\"" ~ inner ~ "\"" }

pair = { identifier ~ ":" ~ value }
dict = {
  "{"
  	~ pair // At least one pair required
    ~ ("," ~ pair)* // Pairs separated with commas
  ~"}"
}

/* ########## VARIABLES AND EVALUATION ########## */
identifier = @{!ASCII_DIGIT ~(ASCII_ALPHANUMERIC | "_" | "-")+}
value = _{string | number | boolean | dict | identifier }
evaluable = _{ "("~ evaluable ~")" | function_call | object | object_call | value | identifier}


binop = _{add|sub|mul|div|pow}
    add =  {"+"}
    sub =  {"-"}
    mul =  {"*"}
    div =  {"/"}
    pow =  {"^"}
neg = {"!"}
expression = {term ~ (binop ~ term)*}
term = _{ evaluable | "(" ~ expression ~ ")" }


/* ########## COMPOSITE TYPES ########## */
object_type = {("Protocol"|"Response"|"Request"|"Timer")}
object =  {object_type ~ dict}

parameter = { string | identifier }
parameters = {"(" ~  identifier ~ ("," ~ identifier)*~ ")"}
arguments = {"(" ~ (expression ~ ("," ~ expression)*)?~ ")"}
function = {
    "Fun" ~ parameters? // arguments (including brackets) optional
    ~ "{"  ~ statement* ~ "}"
}

/* ########## FLOW CONTROL ########## */
body = { statement+ }
conditional_if = {
    "if" ~ expression ~ "{"
    ~ body ~ "}" ~
    (conditional_elif)* ~
    (conditional_else)?
}

conditional_elif = {
    "elif" ~ expression ~ "{"
        ~ body
    ~"}"
}

conditional_else = {
    "else" ~ "{"
        ~ body
    ~"}"
}

/* ########## OPERATIONS ########## */
atribution = {identifier ~ "=" ~ (function|expression)}
function_call = {identifier ~ arguments}
object_call = {identifier ~ "." ~ identifier ~ arguments}

statement = {atribution|conditional_if|function_call|object_call}
program = _{ SOI ~ statement+ ~ EOI }

/* BUILT IN DEFINITIONS */
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }