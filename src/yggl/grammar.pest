/* BUILT IN DEFINITIONS */
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/"| "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) }

/* ########## DATA TYPES ########## */
number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

dtype = _{bool_t | int_t | float_t | char_t | fun_t | identifier}
bool_t = {"bool"}
int_t = {"int"}
float_t = {"float"}
char_t = {"char"}
fun_t = {"fun"}

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
boolean = { "true" | "false" }
inner = @{ char* }
string = ${ "\"" ~ inner ~ "\"" }

pair = { identifier ~ ":" ~ evaluable }
dict = {
  "{"
  	~ pair // At least one pair required
    ~ ("," ~ pair)* // Pairs separated with commas
  ~"}"
}

/* ########## VARIABLES AND EVALUATION ########## */
identifier = @{!ASCII_DIGIT ~(ASCII_ALPHANUMERIC | "_" | "-")+}
cast = { identifier ~ "as" ~ dtype}
value = _{string | number | boolean | dict | identifier }
evaluable = _{ "("~ evaluable ~")" | function_call | attribute | object | object_call | value | identifier}


binop = _{add|sub|mul|div|rem|pow|eq|le|leq|gr|geq|and|or}
add =  {"+"}
sub =  {"-"}
mul =  {"*"}
div =  {"/"}
rem =  {"%"}
pow =  {"^"}
neg = {"!"}
eq =  {"=="}
neq =  {"!="}
le =  {"<"}
leq =  {"<="}
gr =  {">"}
geq =  {">="}
and =  {"&&"}
or =  {"||"}


expression = {term ~ (binop ~ term)*}
term = _{ evaluable | "(" ~ expression ~ ")" }


/* ########## COMPOSITE TYPES ########## */
parameter = { string | identifier }
parameters = {"(" ~  (identifier|cast) ~ ("," ~ (identifier|cast))*~ ")"}
arguments = {"(" ~ (expression ~ ("," ~ expression)*)?~ ")"}
function = {
    "fun" ~ parameters? // arguments (including brackets) optional
    ~ "{"  ~ statement* ~ "}"
}
function_return = {"return" ~ evaluable}
struct_decl = {
    "struct" ~ "{"  ~ ((identifier ~ ",")*) ~ identifier ~ "}"
}
struct_def = { identifier ~ dict }
attribute = {identifier ~ "." ~ identifier}

/* ########## FLOW CONTROL ########## */
body = { statement+ }
conditional_if = {
    "if" ~ expression ~ "{"
    ~ body ~ "}" ~
    (conditional_elif)* ~
    (conditional_else)?
}

conditional_elif = {
    "elif" ~ expression ~ "{"
        ~ body
    ~"}"
}

conditional_else = {
    "else" ~ "{"
        ~ body
    ~"}"
}

cycle = _{cycle_loop|cycle_while|cycle_do_while|cycle_for}
cycle_loop = {
    "loop" ~ "{"
        ~ body
    ~"}"
}
cycle_while = {
     "while" ~ expression ~ "{"
         ~ body
     ~"}"
}
cycle_do_while = {
    "do" ~ "{"
        ~ body
    ~"}" ~ "while" ~ expression
}
cycle_for = {
    "for" ~ assignment ~ ";" ~ expression ~ ";" ~ statement ~ "{"
        ~ body
    ~"}"
}

/* ########## OPERATIONS ########## */
assignment = {(attribute|identifier) ~ "=" ~ (function|struct_decl|struct_def|protocol|expression)}
function_call = {identifier ~ arguments}
object_call = {identifier ~ "." ~ identifier ~ arguments}
declaration = { "touch" ~ identifier }

statement = {function_return|assignment|conditional_if|cycle|function_call|object_call|declaration|cast}
program = _{ SOI ~ statement+ ~ EOI }


/* ########## YGGDRASIL ########## */
protocol = {
    "Proto" ~ dict
}
object_type = {("Protocol"|"Response"|"Request"|"Timer")}
object =  {object_type ~ dict}
