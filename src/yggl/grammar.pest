/* BUILT IN DEFINITIONS */
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/"| "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) }

reserved_words = {
    "true"|"false"|"int"|"bool"|"float"|"char"|"fun"|"struct"
    |"if"|"else"|"elif"|"loop"|"while"|"do"|"for"|"return"
    |"Protocol"|ygg_type|"handles"|"setup"|"send"|"notify"}


statement = {assignment|conditional_if|cycle|attribute_call|function_return|declaration|cast|ygg_statements}
program = _{ SOI ~ (proto_def|function|struct_decl|constant_assignment)+ ~ EOI }

/* ########## LITERALS ########## */
number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

positive_integer = {("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)}


char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
boolean = { "true" | "false" }
inner = @{ char* }
string = ${ "\"" ~ inner ~ "\"" }

time_value = {((positive_integer ~ time_unit)|"0")+}
time_unit = {hour|minute|second|milli}
hour = {"h"}
minute = {"m"}
second = {"s"}
milli = {"ms"}

address = _{broadcast_address|mac_address}
broadcast_address = {"bcast"}
mac_address = {
    HEX_DIGIT ~ HEX_DIGIT ~ ":"
    ~ HEX_DIGIT ~ HEX_DIGIT ~ ":"
    ~ HEX_DIGIT ~ HEX_DIGIT ~ ":"
    ~ HEX_DIGIT ~ HEX_DIGIT ~ ":"
}

/* ########## TYPES ########## */
dtype = _{ bool_t | int_t | float_t | char_t | uuid_t| fun_t | identifier}
bool_t = {"bool"}
int_t = {"int"}
float_t = {"float"}
char_t = {"char"}
uuid_t = {"uuid"}
fun_t = {"fun"}

/* ########## VARIABLES AND EVALUATION ########## */
identifier = @{!ASCII_DIGIT ~(ASCII_ALPHANUMERIC | "_" | "-")+}
cast = { identifier ~ "as" ~ dtype }
value = _{ string | number | boolean | dict | time_value }
evaluable = _{ "("~ evaluable ~")" | function_call | attribute | attribute_call | value | identifier }

/* ########## OPERATIONS ########## */
unop = {neg}
neg = {"!"}

binop = _{add|sub|mul|div|rem|pow|eq|le|leq|gr|geq|and|or|incl|nincl}
add =  {"+"}
sub =  {"-"}
mul =  {"*"}
div =  {"/"}
rem =  {"%"}
pow =  {"^"}
eq =  {"=="}
neq =  {"!="}
le =  {"<"}
leq =  {"<="}
gr =  {">"}
geq =  {">="}
and =  {"&&"}
or =  {"||"}
incl =  {"in"}
nincl =  {"not in"}

/* ########## EXPRESSIONS ########## */
expression = {term ~ (binop ~ term)*}
term = _{ evaluable | "(" ~ expression ~ ")" }

constant_expression = {term ~ (binop ~ term)*}
constant_term = _{ value | "(" ~ constant_expression ~ ")" }

/* ########## COMPOSITE TYPES ########## */

pair = { identifier ~ ":" ~ evaluable }
dict = {
  "{"
    ~ pair // At least one pair required
    ~ ("," ~ pair)* // Pairs separated with commas
  ~"}"
}

struct_decl = {
    ("struct" ~ identifier)? ~ "{"
        ~ struct_decl_body
    ~ "}"
}
struct_decl_body = {(identifier ~ ",")* ~ identifier}
struct_def = { identifier ~ (("{" ~ "}")|dict) }
attribute = { identifier ~ "." ~ identifier}
attribute_call = { attribute ~ "(" ~ arguments? ~ ")"}
list_init = { "[" ~ arguments? ~ "]" }

/* ########## Functions ########## */
parameter = { string | identifier }
parameters = { (cast | identifier) ~ ("," ~ (cast|identifier))*}
arguments = { (expression ~ ("," ~ expression)*)?}
body = { statement+ }
function = {
    "fun" ~ identifier ~ ("(" ~ parameters ~ ")")? // arguments (including brackets) optional
    ~ "{"  ~ body ~ "}"
}
anon_function = {
    "|" ~ parameters? ~ "|"
    ~ "{"  ~ body ~ "}"
}
function_return = {"return" ~ expression}

/* ########## FLOW CONTROL ########## */
conditional_if = {
    "if" ~ expression ~ "{"
    ~ body ~ "}" ~
    (conditional_elif)* ~
    (conditional_else)?
}

conditional_elif = {
    "elif" ~ expression ~ "{"
        ~ body
    ~"}"
}

conditional_else = {
    "else" ~ "{"
        ~ body
    ~"}"
}

cycle = _{cycle_loop|cycle_while|cycle_do_while|cycle_for}
cycle_loop = {
    "loop" ~ "{"
        ~ body
    ~"}"
}
cycle_while = {
     "while" ~ expression ~ "{"
         ~ body
     ~"}"
}
cycle_do_while = {
    "do" ~ "{"
        ~ body
    ~"}" ~ "while" ~ expression
}
cycle_for = {
    "for" ~ assignment ~ ";" ~ expression ~ ";" ~ statement ~ "{"
        ~ body
    ~"}"
}

/* ########## OPERATIONS ########## */
assignment = {(attribute|identifier) ~ "=" ~ (struct_def|list_init|expression)}
constant_assignment = {identifier ~ "=" ~ constant_expression}
function_call = {identifier ~ "(" ~ arguments ~ ")"}
declaration = { "touch" ~ identifier }

/* ########## YGGDRASIL ########## */
ygg_type = _{(request|reply|notification|message|timer)}
request = {"Request"}
reply = {"Reply"}
notification = {"Notification"}
message = {"Message"}
timer = {"Timer"}

timer_type =_{timer_periodic}
timer_periodic = {"periodic"}

proto_def = {
    "Protocol" ~ identifier ~ "{"
        ~ (proto_def_part ~ ",")*
        ~ proto_def_part ~ (",")?
    ~ "}"
}

proto_def_part = _{proto_id|proto_state|proto_init|proto_loop|proto_handler|proto_iface}
proto_state = {"state" ~ ":" ~  struct_decl }

proto_iface = {
    "interface" ~ ":" ~ "{"
        ~ (proto_iface_entry ~ ",")*
        ~ proto_iface_entry ~ (",")?
    ~ "}"
}
proto_iface_entry = _{proto_iface_consumer|proto_iface_producer}
proto_iface_consumer = {"consumes" ~ ygg_type ~ identifier ~ number}
proto_iface_producer = {"produces" ~ ygg_type ~ identifier ~ number ~ number}

proto_id = {
    "id" ~ ":" ~ positive_integer
}

proto_init = {
    "init" ~ ":" ~ anon_function
}

proto_loop = {
    "loop" ~ ":" ~ anon_function
}

proto_handler = {
    "handles" ~ ygg_type ~ identifier ~ handler_function
}
handler_function = { // Separated so that function code can be reused
     "(" ~ parameters? ~ ")" ~ "{"
        ~ body
    ~ "}"
}

ygg_statements = _{setup|send|notify}
setup = {
    "setup" ~ timer_type ~ "Timer" ~ identifier
    ~ "(" ~ time_value ~ "," ~ time_value ~ ")"
}

send = {
    "send" ~ identifier ~ address ~ "(" ~ arguments ~ ")"
}

notify = {
    "notify" ~ identifier ~ "(" ~ arguments ~ ")"
}